#Created by Rudolph - https://github.com/rudolph-git-acc

from mpmath import *\
mp.dps=30\
\
R = RealBallField(100); Z = ComplexBallField(100);\
\
def divdelta(n,d):\
    res=0;\
    if n/d==(n/d).floor():\
        res=1;\
    return (res)\
\
def regdelta(n,dN):\
    res=0;\
    if n <= dN:\
        res=1;\
    return (res)\
\
def bt(n,t):\
    res=n^((t/R(4))*n.log());\
    return (res)\
\
def at(n,t,y,c):\
    res=c*n^(y+(t/R(4))*n.log());\
    return (res)\
\
def abbeffe1(N,y,t):\
    bpi  = R(mp.pi());\
    xN   = R(4)*bpi*N^R(2)-bpi*t/R(4); xNp1 = R(4)*bpi*(N+R(1))^R(2)-bpi*t/R(4);\
    delta= bpi*y/(R(2)*(xN-R(6)-(R(14)+R(2)*y)/bpi))+R(2)*y*(R(7)+y)*((R(1)+y+Z(R(0),R(1))*xNp1).below_abs()/(R(4)*bpi)).log()/(xN^(R(2)));\
    afac = (delta+t*y*N.log()/(2*(xN-R(6)))).exp()/(N^y);\
    sb   = (R(1)+y)/R(2)+(t/R(2))*N.log(); sa   = (R(1)-y)/R(2)+(t/R(2))*N.log();\
    lsbound=R(0); n=R(1);\
    while n <= 2*N:\
        nsbsa = n^(-sb)+afac*n^(-sa)\
        lsbound = lsbound + (divdelta(n,R(1))*regdelta(n,N)*bt(n,t)).below_abs()*nsbsa\
        n = n + R(1);\
    lbound = 2 - lsbound\
    return (lbound)\
\
def abbeffe2(N,y,t):\
    bpi  = R(mp.pi());\
    xN   = R(4)*bpi*N^R(2)-bpi*t/R(4); xNp1 = R(4)*bpi*(N+R(1))^R(2)-bpi*t/R(4);\
    delta= bpi*y/(R(2)*(xN-R(6)-(R(14)+R(2)*y)/bpi))+R(2)*y*(R(7)+y)*((R(1)+y+Z(R(0),R(1))*xNp1).below_abs()/(R(4)*bpi)).log()/(xN^(R(2)));\
    afac = (delta+t*y*N.log()/(2*(xN-R(6)))).exp()/(N^y);\
    sb   = (R(1)+y)/R(2)+(t/R(2))*N.log(); sa   = (R(1)-y)/R(2)+(t/R(2))*N.log();\
    lbbound=R(0);labound=R(0); n=R(2);\
    while n <= 2*N:\
        nsb = (n^sb)\
        cterm1  = divdelta(n,R(1))*regdelta(n,N)/(nsb)\
        cterm2  = divdelta(n,R(2))*regdelta(n,R(2)*N)*(-bt(R(2),t))/(nsb)\
        lbbound = lbbound + (cterm1*bt(n,t)+cterm2*bt(n/R(2),t)).below_abs()\
        labound = labound + (cterm1*at(n,t,y,R(1))+cterm2*at(n/R(2),t,y,R(1))).below_abs()\
        n = n + R(1);\
    lbound = R(1) - at(R(1),t,y,afac)-lbbound -afac*labound\
    return (lbound)\
\
def abbeffe3(N,y,t):\
    bpi  = R(mp.pi());\
    xN   = R(4)*bpi*N^R(2)-bpi*t/R(4); xNp1 = R(4)*bpi*(N+R(1))^R(2)-bpi*t/R(4);\
    delta= bpi*y/(R(2)*(xN-R(6)-(R(14)+R(2)*y)/bpi))+R(2)*y*(R(7)+y)*((R(1)+y+Z(R(0),R(1))*xNp1).below_abs()/(R(4)*bpi)).log()/(xN^(R(2)));\
    afac = (delta+t*y*N.log()/(2*(xN-R(6)))).exp()/(N^y);\
    sb   = (R(1)+y)/R(2)+(t/R(2))*N.log(); sa   = (R(1)-y)/R(2)+(t/R(2))*N.log();\
    lbbound=R(0);labound=R(0); n=R(2);\
    while n <= 6*N:\
        nsb = (n^sb)\
        cterm1  = divdelta(n,R(1))*regdelta(n,N)/(nsb)\
        cterm2  = divdelta(n,R(2))*regdelta(n,R(2)*N)*(-bt(R(2),t))/(nsb)\
        cterm3  = divdelta(n,R(3))*regdelta(n,R(3)*N)*(-bt(R(3),t))/(nsb)\
        cterm4  = divdelta(n,R(6))*regdelta(n,R(6)*N)*bt(R(2),t)*bt(R(3),t)/(nsb)\
        lbbound = lbbound + (cterm1*bt(n,t)+cterm2*bt(n/R(2),t)+cterm3*bt(n/R(3),t)+cterm4*bt(n/R(6),t)).below_abs()\
        labound = labound + (cterm1*at(n,t,y,R(1))+cterm2*at(n/R(2),t,y,R(1))+cterm3*at(n/R(3),t,y,R(1))+cterm4*at(n/R(6),t,y,R(1))).below_abs()\
        n = n + R(1);\
    lbound = R(1) - at(R(1),t,y,afac)-lbbound -afac*labound\
    return (lbound)\
\
def abbeffe5(N,y,t):\
    bpi  = R(mp.pi());\
    xN   = R(4)*bpi*N^R(2)-bpi*t/R(4); xNp1 = R(4)*bpi*(N+R(1))^R(2)-bpi*t/R(4);\
    delta= bpi*y/(R(2)*(xN-R(6)-(R(14)+R(2)*y)/bpi))+R(2)*y*(R(7)+y)*((R(1)+y+Z(R(0),R(1))*xNp1).below_abs()/(R(4)*bpi)).log()/(xN^(R(2)));\
    afac = (delta+t*y*N.log()/(2*(xN-R(6)))).exp()/(N^y);\
    sb   = (R(1)+y)/R(2)+(t/R(2))*N.log(); sa   = (R(1)-y)/R(2)+(t/R(2))*N.log();\
    lbbound=R(0);labound=R(0); n=R(2);\
    while n <= 30*N:\
        nsb = (n^sb)\
        cterm1  = divdelta(n,R(1))*regdelta(n,N)/(nsb)\
        cterm2  = divdelta(n,R(2))*regdelta(n,R(2)*N)*(-bt(R(2),t))/(nsb)\
        cterm3  = divdelta(n,R(3))*regdelta(n,R(3)*N)*(-bt(R(3),t))/(nsb)\
        cterm4  = divdelta(n,R(5))*regdelta(n,R(5)*N)*(-bt(R(5),t))/(nsb)\
        cterm5  = divdelta(n,R(6))*regdelta(n,R(6)*N)*bt(R(2),t)*bt(R(3),t)/(nsb)\
        cterm6  = divdelta(n,R(10))*regdelta(n,R(10)*N)*bt(R(2),t)*bt(R(5),t)/(nsb)\
        cterm7  = divdelta(n,R(15))*regdelta(n,R(15)*N)*bt(R(3),t)*bt(R(5),t)/(nsb)\
        cterm8  = divdelta(n,R(30))*regdelta(n,R(30)*N)*(-bt(R(2),t))*bt(R(3),t)*bt(R(5),t)/(nsb)\
        bterm1  = cterm1*bt(n,t)+cterm2*bt(n/R(2),t)+cterm3*bt(n/R(3),t)+cterm4*bt(n/R(5),t)\
        bterm2  = cterm5*bt(n/R(6),t)+cterm6*bt(n/R(10),t)+cterm7*bt(n/R(15),t)+cterm8*bt(n/R(30),t)\
        lbbound = lbbound + (bterm1 + bterm2).below_abs()\
        aterm1  = cterm1*at(n,t,y,R(1))+cterm2*at(n/R(2),t,y,R(1))+cterm3*at(n/R(3),t,y,R(1))+cterm4*at(n/R(5),t,y,R(1))\
        aterm2  = cterm5*at(n/R(6),t,y,R(1))+cterm6*at(n/R(10),t,y,R(1))+cterm7*at(n/R(15),t,y,R(1))+cterm8*at(n/R(30),t,y,R(1))\
        labound = labound + (aterm1 + aterm2).below_abs()\
        n = n + R(1);\
    lbound = R(1) - at(R(1),t,y,afac)-lbbound -afac*labound\
    return (lbound)\
\
\
print(abbeffe2(R(60000),R(4/10),R(2/10)))}
